name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-docker:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout repo
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # ✅ Setup Node.js
      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # Use Node 18 (recommended for Next.js 15)

      # ✅ Install dependencies
      - name: Install deps ignoring peer conflicts
        run: npm install --legacy-peer-deps

      # ✅ Run tests
      - name: 🧪 Run tests
        run: npm run test

      # ✅ Run lint (optional)
      - name: 🧹 Run linter
        run: npm run lint

      # ✅ Build Next.js app (required for Docker)
      - name: 🏗️ Build Next.js
        run: npm run build

      # ✅ Build Docker image
      - name: 🐳 Build Docker image
        run: |
          docker build \
            -f Dockerfile.prod \
            --build-arg NEXT_PUBLIC_PORT=${{ secrets.NEXT_PUBLIC_PORT }} \
            -t front-app .

      # ✅ Push Docker image to Docker Hub
      - name: 🔐 Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 📤 Push Docker image
        run: |
          docker tag front-app ${{ secrets.DOCKER_USERNAME }}/front-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/front-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-docker # ✅ job นี้จะรอ job ข้างบนเสร็จก่อน
    steps:
      - name: 📦 SSH & Deploy Docker Container on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/front-app:latest
            docker stop taskmanage-frontend || true
            docker rm taskmanage-frontend || true
            docker run -d \
              --name taskmanage-frontend \
              -p 80:3000 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/front-app:latest
